// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using PanoScrobblerAlbumFixer.API;
//
//    var recentTracks = RecentTracks.FromJson(jsonString);

using Microsoft.Extensions.Primitives;

namespace PanoScrobblerAlbumFixer.API
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class RecentTracksJson
    {
        [JsonProperty("recenttracks", NullValueHandling = NullValueHandling.Ignore)]
        public RecentTracks RecentTracks { get; set; }
    }

    public partial class RecentTracks
    {
        [JsonProperty("track", NullValueHandling = NullValueHandling.Ignore)]
        public List<Track> Track { get; set; }

        [JsonProperty("@attr", NullValueHandling = NullValueHandling.Ignore)]
        public Attr Attr { get; set; }
    }

    public partial class Attr
    {
        [JsonProperty("user", NullValueHandling = NullValueHandling.Ignore)]
        public string User { get; set; }

        [JsonProperty("totalPages", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? TotalPages { get; set; }

        [JsonProperty("page", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Page { get; set; }

        [JsonProperty("perPage", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? PerPage { get; set; }

        [JsonProperty("total", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Total { get; set; }
    }

    public partial class Track
    {
        public string OldArtist { get; set; }
        public string OldAlbum { get; set; }
        public string OldName { get; set; }
        public short? Page { get; set; }
        
        [JsonProperty("artist", NullValueHandling = NullValueHandling.Ignore)]
        public Album Artist { get; set; }

        [JsonProperty("streamable", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Streamable { get; set; }

        [JsonProperty("image", NullValueHandling = NullValueHandling.Ignore)]
        public Image[] Image { get; set; }

        [JsonProperty("mbid", NullValueHandling = NullValueHandling.Ignore)]
        public string Mbid { get; set; }

        [JsonProperty("album", NullValueHandling = NullValueHandling.Ignore)]
        public Album Album { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }

        [JsonProperty("date", NullValueHandling = NullValueHandling.Ignore)]
        public Date Date { get; set; }

        public override string ToString()
        {
            var sb = new System.Text.StringBuilder();
            if (Artist != null && Artist.Text != null)
            {
                sb.Append(Artist.Text);
                sb.Append(" - ");
            }
            if(Name != null )
            {
                sb.Append(Name);
                sb.Append(" - ");
            }
            if(OldAlbum != null)
            {
                sb.Append("***");
                sb.Append(OldAlbum);
                sb.Append("***");
                sb.Append("-->");
            }
            if (Album != null && Album.Text != null)
            {
                sb.Append(Album.Text);
            }
            return sb.ToString();
        }
    }

    public partial class Album
    {
        [JsonProperty("mbid", NullValueHandling = NullValueHandling.Ignore)]
        public string Mbid { get; set; }

        [JsonProperty("#text", NullValueHandling = NullValueHandling.Ignore)]
        public string Text { get; set; }
    }

    public partial class Date
    {
        [JsonProperty("uts", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Uts { get; set; }

        [JsonProperty("#text", NullValueHandling = NullValueHandling.Ignore)]
        public string Text { get; set; }
    }

    public partial class Image
    {
        [JsonProperty("size", NullValueHandling = NullValueHandling.Ignore)]
        public Size? Size { get; set; }

        [JsonProperty("#text", NullValueHandling = NullValueHandling.Ignore)]
        public string Text { get; set; }
    }

    public enum Size { Extralarge, Large, Medium, Small };

    public partial class RecentTracksJson
    {
        public static RecentTracksJson FromJson(string json) => JsonConvert.DeserializeObject<RecentTracksJson>(json, PanoScrobblerAlbumFixer.API.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this RecentTracksJson self) => JsonConvert.SerializeObject(self, PanoScrobblerAlbumFixer.API.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                SizeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class SizeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Size) || t == typeof(Size?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "extralarge":
                    return Size.Extralarge;
                case "large":
                    return Size.Large;
                case "medium":
                    return Size.Medium;
                case "small":
                    return Size.Small;
            }
            throw new Exception("Cannot unmarshal type Size");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Size)untypedValue;
            switch (value)
            {
                case Size.Extralarge:
                    serializer.Serialize(writer, "extralarge");
                    return;
                case Size.Large:
                    serializer.Serialize(writer, "large");
                    return;
                case Size.Medium:
                    serializer.Serialize(writer, "medium");
                    return;
                case Size.Small:
                    serializer.Serialize(writer, "small");
                    return;
            }
            throw new Exception("Cannot marshal type Size");
        }

        public static readonly SizeConverter Singleton = new SizeConverter();
    }
}
