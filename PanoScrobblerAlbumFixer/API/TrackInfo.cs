// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using PanoScrobblerAlbumFixer.API;
//
//    var trackInfo = TrackInfo.FromJson(jsonString);

namespace PanoScrobblerAlbumFixer.API
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class TrackInfo
    {
        [JsonProperty("track", NullValueHandling = NullValueHandling.Ignore)]
        public InfoTrack Track { get; set; }
    }

    public partial class InfoTrack
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }

        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(InfoParseStringConverter))]
        public long? Duration { get; set; }

        [JsonProperty("streamable", NullValueHandling = NullValueHandling.Ignore)]
        public Streamable Streamable { get; set; }

        [JsonProperty("listeners", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(InfoParseStringConverter))]
        public long? Listeners { get; set; }

        [JsonProperty("playcount", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(InfoParseStringConverter))]
        public long? Playcount { get; set; }

        [JsonProperty("artist", NullValueHandling = NullValueHandling.Ignore)]
        public Artist Artist { get; set; }

        [JsonProperty("album", NullValueHandling = NullValueHandling.Ignore)]
        public Album Album { get; set; }

        [JsonProperty("toptags", NullValueHandling = NullValueHandling.Ignore)]
        public Toptags Toptags { get; set; }

        [JsonProperty("wiki", NullValueHandling = NullValueHandling.Ignore)]
        public Wiki Wiki { get; set; }
    }

    public partial class Album
    {
        [JsonProperty("artist", NullValueHandling = NullValueHandling.Ignore)]
        public string Artist { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }

        [JsonProperty("image", NullValueHandling = NullValueHandling.Ignore)]
        public List<Image> Image { get; set; }
    }

    public partial class Artist
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("mbid", NullValueHandling = NullValueHandling.Ignore)]
        public Guid? Mbid { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }
    }

    public partial class Streamable
    {
        [JsonProperty("#text", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(InfoParseStringConverter))]
        public long? Text { get; set; }

        [JsonProperty("fulltrack", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(InfoParseStringConverter))]
        public long? Fulltrack { get; set; }
    }

    public partial class Toptags
    {
        [JsonProperty("tag", NullValueHandling = NullValueHandling.Ignore)]
        public List<Tag> Tag { get; set; }
    }

    public partial class Tag
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }
    }

    public partial class Wiki
    {
        [JsonProperty("published", NullValueHandling = NullValueHandling.Ignore)]
        public string Published { get; set; }

        [JsonProperty("summary", NullValueHandling = NullValueHandling.Ignore)]
        public string Summary { get; set; }

        [JsonProperty("content", NullValueHandling = NullValueHandling.Ignore)]
        public string Content { get; set; }
    }

    public partial class TrackInfo
    {
        public static TrackInfo FromJson(string json) => JsonConvert.DeserializeObject<TrackInfo>(json, PanoScrobblerAlbumFixer.API.Converter.Settings);
    }

    public static class InfoSerialize
    {
        public static string ToJson(this TrackInfo self) => JsonConvert.SerializeObject(self, PanoScrobblerAlbumFixer.API.Converter.Settings);
    }

    internal static class InfoConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class InfoParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
